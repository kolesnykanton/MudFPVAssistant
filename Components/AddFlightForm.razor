@using MudBlazor
@using MudFPVAssistant.Components

<MudPaper Class="p-4">
    <MudText Typo="Typo.h6">New Flight</MudText>

    <MudStack Spacing="2">
        <MudTextField Label="Name (Drone, Battery, etc)" @bind-Value="_draft.Name" />
        <MudNumericField Label="Battery Used (mAh)" @bind-Value="_draft.UsedMah" />
        <MudSelect T="FlightInfo.BatteryType"
                   Label="Battery Type"
                   @bind-Value="_draft.BatType"
                   Required="true">
            @foreach (var t in Enum.GetValues<FlightInfo.BatteryType>())
            {
                <MudSelectItem Value="@t">@t</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="int"
                   Label="Cell count"
                   @bind-Value="_draft.CellCount"
                   Required="true">
            @for (var i = 1; i <= 6; i++)
            {
                var i1 = i;
                <MudSelectItem Value="i">@($"{i1}S")</MudSelectItem>
            }
        </MudSelect>

        <MudTextField Label="Duration (mm:ss)"
                      @bind-Value="_duration"
                      Placeholder="05:12"
                      Immediate="true"
                      Mask="@mask1"
                      Pattern="^\d{2}:\d{2}$"
                      ErrorText="Please use format mm:ss" />

        <MudTextField Label="Location" @bind-Value="_draft.Location" />
        <MudTextField Label="Comment" @bind-Value="_draft.Comment" />

        <MudDatePicker @bind-Date="_draft.Date" Label="Flight Date" />

        <MudButton Color="Color.Primary"
                   Disabled="!IsValid"
                   OnClick="Submit">
            <MudIcon Icon="@Icons.Material.Filled.AddCircle" Class="me-1" />
            Add
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    [Parameter] public EventCallback<FlightInfo> OnAdd { get; set; }

    private FlightInfo _draft = new() { Date = DateTime.Today };
    private string _duration;
    private bool _hasError = false;
    public PatternMask mask1 = new PatternMask("##:##") { 
        MaskChars = new[] { new MaskChar('#', @"[0-9]") } 
    };
    private bool IsValid => !string.IsNullOrWhiteSpace(_draft.Name);

    private async Task Submit()
    {
        if (!IsValid) 
            return;
        if (TimeSpan.TryParseExact(_duration, @"mm\:ss", null, out var parsed))
            _draft.FlightTime = parsed;
        else
        {
            _hasError = true;
            return;
        }
        _draft.Date ??= DateTime.Today;

        // Invoke Event
        await OnAdd.InvokeAsync(_draft);

        // Clean Form
        _draft = new() { Date = DateTime.Today, BatType = FlightInfo.BatteryType.LiPo };
        _duration = string.Empty;
    }
}
