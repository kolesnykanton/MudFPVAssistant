@using MudFPVAssistant.Converters
@using MudFPVAssistant.Models
@using MudFPVAssistant.Models.DataSources
@using MudFPVAssistant.Services
@using MudFPVAssistant.Services.Firebase
@inject IFirebaseStorageService StorageService
@inject AuthState AuthState
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1"/>
            Редагувати спот
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="Spot.Name" Label="Назва" Required="true" Class="mb-2"/>
        <MudTextField T="GeolocationCoords"
                      Label="Координати"
                      ReadOnly="true"
                      Value="Spot.Coords"
                      Converter="@(new CoordinateConverter())"
                      Class="mb-2"/>
        <MudTextField @bind-Value="Spot.Comments" Label="Коментарі" Class="mb-2"/>

        <MudText>Тип:</MudText>
        <MudChipSet T="string"
                    @bind-SelectedValue="Spot.Category"
                    SelectionMode="SelectionMode"
                    Checkmark="true"
                    Class="mb-2">
            @foreach (var cat in new (string Name, Color Color, string Icon)[]
                          {
                              ("Mountain", Color.Primary, Icons.Material.Filled.Terrain),
                              ("Beach", Color.Info, Icons.Material.Filled.BeachAccess),
                              ("Building", Color.Secondary, Icons.Material.Filled.LocationCity),
                              ("Forest", Color.Success, Icons.Material.Filled.Forest)
                          })
            {
                <MudChip Text="@cat.Name"
                         Value="@cat.Name"
                         Color="@cat.Color"
                         Icon="@cat.Icon"
                         Variant="Variant.Filled"
                         Class="ma-1">
                    @cat.Name
                </MudChip>
            }
        </MudChipSet>

        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                       Class="mt-2"
                       FilesChanged="OnFileSelected">
            <ActivatorContent>
                <MudFab Size="Size.Small"
                        Color="Color.Info"
                        StartIcon="@Icons.Material.Filled.Image"
                        Label="Завантажити фото"/>
            </ActivatorContent>
        </MudFileUpload>
        @if (!string.IsNullOrEmpty(_tempPhotoUrl))
        {
            <div style="margin-top:10px;">
                <img src="@_tempPhotoUrl"
                     style="max-width:150px; margin-top:4px; border:1px solid #ccc;"/>
            </div>
        }
        else if (!string.IsNullOrEmpty(Spot.PhotoUrl))
        {
            <div style="margin-top:10px;">
                <img src="@Spot.PhotoUrl"
                     style="max-width:150px; margin-top:4px; border:1px solid #ccc;"/>
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Скасувати</MudButton>
        <MudButton OnClick="Save" Color="Color.Primary">Зберегти</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public FlightSpot Spot { get; set; } = default!;

    public SelectionMode SelectionMode = SelectionMode.SingleSelection;

    // Якщо ви хочете зберігати storage path у Spot:
    // [JsonIgnore] public string? StoragePath { get; set; } — уже є в моделі

    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        if (files?.Count > 0)
        {
            var file = files[0];

            // Якщо Spot.Id ще не заповнено, згенеруємо тут (одноетапний підхід)
            if (string.IsNullOrWhiteSpace(Spot.Id))
            {
                Spot.Id = Guid.NewGuid().ToString();
            }

            var uid = AuthState.Uid
                      ?? throw new InvalidOperationException("User not authenticated");

            var fileName = file.Name;
            // Формуємо storagePath: users/{uid}/FlightSpots/{spotId}/{fileName}
            var storagePath = $"users/{uid}/FlightSpots/{Spot.Id}/{fileName}";

            try
            {
                // Завантажуємо у Storage через JS-interop
                var downloadUrl = await StorageService.UploadAsync(storagePath, file);

                // Записуємо обидва поля в Spot
                Spot.StoragePath = storagePath;
                Spot.PhotoUrl = downloadUrl;
            }
            catch (Exception ex)
            {
                // Якщо upload не вдався, виведемо компонент Snackbar чи Console
                Console.Error.WriteLine($"Upload error: {ex.Message}");
                // Можна повідомити користувачу через Snackbar, якщо він інжектований
            }

            StateHasChanged();
        }
    }

    // тимчасово зберігаємо вибраний IBrowserFile
    private IBrowserFile? _pendingFile;

    // DataURL (base64) для прев’ю у <img>
    private string? _tempPhotoUrl;

    private async Task OnFileSelected(IReadOnlyList<IBrowserFile> files)
    {
        if (files?.Count > 0)
        {
            _pendingFile = files[0];

            // Зчитуємо байти, щоб сформувати base64 DataURL для прев’ю
            try
            {
                using var stream = _pendingFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var bytes = ms.ToArray();

                // Створюємо DataURL, щоб показати прев’ю без завантаження на сервер
                _tempPhotoUrl = $"data:{_pendingFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
            }
            catch
            {
                Snackbar.Add("Помилка при читанні файлу для прев’ю.", Severity.Error);
            }
        }
    }

    private async Task Save()
    {
        // Генеруємо Id, якщо Spot.Id ще не призначено (залежно від того, чи новий це об’єкт)
        if (string.IsNullOrWhiteSpace(Spot.Id))
        {
            Spot.Id = Guid.NewGuid().ToString();
        }

        // Якщо є вибраний файл — виконуємо upload у Firebase Storage
        if (_pendingFile is not null)
        {
            var uid = AuthState.Uid
                      ?? throw new InvalidOperationException("User not authenticated");

            var fileName = _pendingFile.Name;
            var storagePath = $"users/{uid}/FlightSpots/{Spot.Id}/{fileName}";

            try
            {
                // Завантажуємо у Storage (JS-interop)
                var downloadUrl = await StorageService.UploadAsync(storagePath, _pendingFile);

                Spot.StoragePath = storagePath;
                Spot.PhotoUrl = downloadUrl;
            }
            catch
            {
                Snackbar.Add("Не вдалося завантажити фото на сервер.", Severity.Error);
                return;
            }
        }

        // Закриваємо діалог і повертаємо оновлений об’єкт
        MudDialog.Close(DialogResult.Ok(Spot));
    }

    private void Cancel() => MudDialog.Cancel();
}
