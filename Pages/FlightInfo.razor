@page "/flightinfo"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using MudFPVAssistant.Components
@using MudFPVAssistant.Models.DataSources
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@implements IDisposable
@inject DataSourceFactory factory

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudGrid>
      <!-- New Flight Form -->
        <MudItem xs="12" md="6" Class="mt-2">
            <AddFlightForm OnAdd="AddAsync" />
        </MudItem>

        <!-- DataGrid for selected flights -->
        <MudItem>
            @*<MudText Typo="Typo.h6">Date Filter</MudText>*@
            <MudDatePicker
                Class="w-25"
                Label="Date Picker"
                @bind-Date="_filterDate"
                AdditionalDateClassesFunc="GetDayClass" />
            <FlightTable Flights="FilteredFlights" OnDelete="DeleteAsync"/>
        </MudItem>
        
        <!-- Stats & Charts -->
        <MudItem xs="12">
            <FlightStats Flights="_ds.Items" />
        </MudItem>

    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthStateTask { get; set; }

    private DateTime? _filterDate = DateTime.Today;
    private const string StorageKey = "flight-entries";
    private string _duration;
    private MudDataGrid<Models.FlightInfo> grid;
    private List<Models.FlightInfo> _flights = [];

    private Models.FlightInfo.BatteryType _selectedType = Models.FlightInfo.BatteryType.Unknown;
  
    private IDataSource<Models.FlightInfo> _ds;

    protected override async Task OnInitializedAsync()
    {
        // Завантажуємо cloud-джерело
        _ds = factory.Get<Models.FlightInfo>();
        await _ds.InitializeAsync();
        _ds.OnUpdated += Refresh;
    }

    protected override async Task OnParametersSetAsync()
    {
        /*var authState = await AuthStateTask;
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            _flights = await userFlightService.GetAsync<FlightInfo>("FlightInfos");
        }*/
        //_isLoading = false;
    }
    private void Refresh() 
        => InvokeAsync(StateHasChanged);

    private Task AddAsync(Models.FlightInfo flight) 
        => _ds.AddAsync(flight);

    private Task DeleteAsync(string id) 
        => _ds.DeleteAsync(id);

    private IEnumerable<Models.FlightInfo> FilteredFlights =>
        _filterDate == null
            ? _ds.Items
            : _ds.Items.Where(f => f.Date?.Date == _filterDate.Value.Date);

    private string? GetDayClass(DateTime day) 
        => _ds.Items.Any(f => f.Date?.Date == day.Date)
            ? "flight-day"
            : null;

    public void Dispose() 
        => _ds.OnUpdated -= Refresh;

    IDictionary<string, object>? GetDayAttrs(DateTime day)
    {
        var count = _flights.Count(f => f.Date?.Date == day.Date);
        if (count > 0)
            return new Dictionary<string, object>
            {
                ["title"] = $"Польотів: {count}" // браузерний tooltip
            };

        return null; // нічого не додавати
    }

}

<style>
    .flight-day {
        background: #d28819 !important;
        color: #fff !important;
        border-radius: 50% !important
    }
</style>