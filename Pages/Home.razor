@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@using MudFPVAssistant.Services.DataSources
@inject ISnackbar Snackbar
@inject ReactiveUserCollectionService<Models.FlightInfo> flightData
@inject IDataSource<FlightSpot> flightSpotDataSource
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Home</PageTitle>

<MudGrid Class="mt-4 mb-4">
    <MudItem xs="12" sm="6" md="4">
        <MudCard>
            <MudCardContent Class="text-center">
                <MudText Typo="Typo.h6">Total Flights</MudText>
                <MudText Typo="Typo.h4">@_flights.Count</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudCard>
            <MudCardContent Class="text-center">
                <MudText Typo="Typo.h6">Total mAh</MudText>
                <MudText Typo="Typo.h4">@_flights.Sum(x => x.UsedMah ?? 0)</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudCard>
            <MudCardContent Class="text-center">
                <MudText Typo="Typo.h6">Unique flights</MudText>
                <MudText Typo="Typo.h4">@_flights.Select(x => x.Name).Distinct().Count()</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudCard>
            <MudCardContent Class="text-center">
                <MudText Typo="Typo.h6">Flight Spots</MudText>
                <MudButton Variant="Variant.Text" Size="Size.Large" OnClick="@(() => Navigation.NavigateTo("/mapspotsave"))" Typo="Typo.h1">@flightSpotDataSource.Items.Count()</MudButton >
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
<InputFile OnChange="OnFileChange" />
<MudButton OnClick="ImportFlights">Import data</MudButton>

@code
{
    private List<Models.FlightInfo> _flights = [];
    IBrowserFile uploadedFile;
    List<Models.FlightInfo> loadedFlights = new();

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        using var stream = uploadedFile.OpenReadStream();
        using var reader = new StreamReader(stream);
        var json = await reader.ReadToEndAsync();
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

        loadedFlights = JsonSerializer.Deserialize<List<Models.FlightInfo>>(json, options);
        
    }

    private async Task ImportFlights()
    {
        Snackbar.Add("Start", Severity.Info);
        foreach (var flight in loadedFlights)
        {
            await flightData.AddAsync(flight);
        }

        Snackbar.Add("Done", Severity.Success);
    }
    protected override async Task OnInitializedAsync()
    {
        
        await flightData.InitializeAsync();
        await flightSpotDataSource.InitializeAsync();
        _flights = flightData.Items.ToList();
        
        flightSpotDataSource.OnUpdated += Refresh;
        flightData.OnUpdated += OnFlightsChanged;
    }
    private void OnFlightsChanged()
    {
        //UpdateFlightChart();
        _flights = flightData.Items.ToList();
        InvokeAsync(StateHasChanged);
    }
    private void Refresh() 
        => InvokeAsync(StateHasChanged);
    public void Dispose()
    {
        flightData.OnUpdated -= OnFlightsChanged;
    }
}
